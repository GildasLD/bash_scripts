#!/bin/bash
# 2022 Gildas Le Drogoff <gildas.le-drogoff@epitech.eu>

# Script Name : make_gnome_launcher.sh
# Example     : bash make_gnome_launcher.sh --name=Insomnia --executable="/opt/Insomnia/insomnia" --image="./insomnia.svg"

set -ef +x -o pipefail
if [[ $EUID == 0 ]]; then
    echo "Do not run this script with sudo. Run it like this :"
    echo "bash make_gnome_launcher.sh"
    exit 1
fi

Options=$@

# Colors :

NC='\033[0m'
RED='\033[0;31m'

# stderr and exit with an error
die() {
    echo "$*" >&2
    exit 2
}

_help() {
    cat <<EOF
make_gnome_launcher $Options
$*
 Usage : make_gnome_launcher [OPTION]...
 Create a gnome launcher for a custom application with a given path.

    -h, --help          show this message
    -i, --image         set image for icon (svg, need for inkscape)
    -e, --executable    set the path of the executable
    -n, --name          set the app name
        --comment       set the comment
        --categories    set the categorie(s)
        --uninstall     uninstall the given app
EOF
}
[ $# = 0 ] && _help " >>> No option is given "
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

# Reset in case getopts was previously used in the shell
OPTIND=1

# Initialization of our own variables :
IMAGE=""
PATH_OF_EXEC=""
APP_NAME=""
CATEGORIES="Development"
COMMENT="Custom application launcher"
ICON=org.gnome.Extensions-symbolic
VERBOSE=0

function launcherExists() {
    [[ -f $LAUNCHER ]] && return 0
    return 1
}
function execExists() {
    [[ -f $PATH_OF_EXEC ]] && return 0
    return 1
}
function nameExists() {
    [[ -n $APP_NAME ]] && return 0
    return 1
}
# Uninstall launcher
_uninstall() {
    echo -e "You asked to remove ${RED}$APP_NAME${NC} launcher\n"
    echo 'Proceed ? (y/N)'
    read -r choice
    if [ "$choice" != "y" ]; then
        echo 'Exiting'
        exit 0
    fi

    if [ -f ~/.local/share/applications/"$APP_NAME".desktop ]; then

        rm -vf ~/.local/share/applications/"$APP_NAME".desktop
        if [ -x "$(command -v update-desktop-database)" ]; then
            update-desktop-database ~/.local/share/applications
        fi
        echo -e "\n${RED}$APP_NAME${NC} launcher has been removed\n"
        exit 0
    else
        echo -e "\nLauncher for ${RED}$APP_NAME${NC} does not exists !\n"
        exit 1
    fi
}
function writeIcon() {
    if [ -x "$(command -v inkscape)" ]; then
        if [[ -f $IMAGE ]]; then
            cp "$IMAGE" ~/.local/share/icons/hicolor/512x512/
            mkdir -pv ~/.local/share/icons/hicolor/512x512/{apps,mimetypes}
            cd ~/.local/share/icons/hicolor/512x512
            inkscape --export-type=png "$IMAGE" -o "apps/$APP_NAME.png" -d 300 -w 512 -h 512
        else
            die "Provided image is not valid"
        fi
    else
        die "inkscape must be installed..."
    fi
}
while getopts "h?vn:i:e:-:" OPT; do
    if [ "$OPT" = "-" ]; then     # long option : reword OPT and OPTARG
        OPT="${OPTARG%%=*}"       # extract the name of the long option
        OPTARG="${OPTARG#"$OPT"}" # extract the long option argument (can be empty)
        OPTARG="${OPTARG#=}"      # if long option argument, remove the '=' assigning
    fi
    case "$OPT" in
    h | help | \?)
        _help
        exit 0
        ;;
    v | verbose)
        VERBOSE=0
        ;;
    uninstall)
        _uninstall
        ;;
    i | image)
        needs_arg
        IMAGE="$OPTARG"
        writeIcon
        ;;
    e | executable)
        needs_arg
        PATH_OF_EXEC="$OPTARG"
        ;;
    n | name)
        needs_arg
        APP_NAME="$OPTARG"
        ;;
    comment)
        COMMENT="$OPTARG"
        ;;
    categories)
        CATEGORIES="$OPTARG"
        ;;
    *)
        _help
        exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

LAUNCHER=~/.local/share/applications/$APP_NAME.desktop

function print_opts() {
    echo -e "\n${RED}name${NC} = $APP_NAME"
    echo -e "${RED}executable${NC} = $PATH_OF_EXEC"
    echo -e "${RED}image${NC} = $IMAGE"
    echo -e "${RED}verbose${NC} = $VERBOSE"
    echo -e "${RED}launcher${NC} = $LAUNCHER"
}

[[ $VERBOSE == "1" ]] && print_opts

if execExists; then
    echo -e "\nProceed ? (y/N)"
    read -r choice
    if [ "$choice" != "y" ]; then
        echo 'Exiting...'
        exit 0
    fi
    if ! nameExists; then
        echo -e "\n${RED}You must provide a name !${NC}"
        die "make_gnome_launcher --help"
    fi
else
    die "Executable path is not valid"
fi

ICON=~/.local/share/icons/hicolor/512x512/apps/$APP_NAME.png

cat >"$LAUNCHER" <<-EOM
	[Desktop Entry]
	Encoding=UTF-8
	Type=Application
	Name=$APP_NAME
	Icon=$ICON
	Exec=$PATH_OF_EXEC %F
	Comment=$COMMENT
	Categories=$CATEGORIES
	StartupNotify=false
	Terminal=false
	X-AppImage-Comment=Generated by make_gnome_launcher.sh
EOM

chmod u+x "$LAUNCHER"
launcherExists && echo -e "\n${RED}Success ! ${NC}"

# Define the launcher as trusted
if [ -x "$(command -v gio)" ]; then
    gio set "$LAUNCHER" "metadata::trusted" true 2>/dev/null || true
fi
if [ -x "$(command -v update-desktop-database)" ]; then
    update-desktop-database ~/.local/share/applications
fi

cat "$LAUNCHER"
exit 0

