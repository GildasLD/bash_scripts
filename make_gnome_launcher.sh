#!/bin/bash
# 2022 Gildas Le Drogoff <gildas.le-drogoff@epitech.eu>
# Script Name : make_gnome_launcher.sh
# Example  : bash make_gnome_launcher.sh -v -n=Insomnia -e="/opt/Insomnia/insomnia" -i="./insomnia.svg"

set -ef +x -o pipefail

if [[ $EUID == 0 ]]; then
    echo "Do not run this script with sudo. Run it like this :"
    echo "bash make_gnome_launcher.sh"
    exit 1
fi

# Colors :
NC='\033[0m'
RED='\033[0;31m'

# stderr and exit with an error
die() {
    echo "$*" >&2
    exit 2
}

# Initialization of our own variables :
APP_NAME=""
CATEGORIES="Development"
COMMENT="Custom application launcher"
ICON="" # org.gnome.Extensions-symbolic
IMAGE=""
PATH_OF_EXEC=""
VERBOSE=0

ckBinaries() {
    if ! command -v inkscape &>/dev/null; then
        echo -e "\nError : This tool requires inkscape to be used !\n" >&2
        # if ! command -v update-desktop-database &>/dev/null; then
        # if ! command -v gio &>/dev/null; then
        # if ! command -v update-mime-database &>/dev/null; then
        return 1
    fi
}

function print_opts() {
    echo -e "\n${RED}name${NC} = $APP_NAME"
    echo -e "${RED}image${NC} = $IMAGE"
    echo -e "${RED}executable${NC} = $PATH_OF_EXEC"
    echo -e "${RED}comment${NC} = $COMMENT"
    echo -e "${RED}categorie(s)${NC} = $CATEGORIES"
}

function launcherExists() {
    if [[ -w $LAUNCHER ]]; then
        echo "Launcher exists, uninstall ? (y/N)"
        read -r choice
        if [ "$choice" = "y" ]; then
            uninstall || return 1
        fi
    else
        return 0
    fi
}

validateArgv() {
    [[ -f $PATH_OF_EXEC ]] || echo "Path is not valid (-e)"
    [[ -n $APP_NAME ]] || echo "Missing name (-n)"
    [[ -f $IMAGE ]] || die "Wrong image (-i)"
}

# Uninstall launcher
uninstall() {
    echo -e "You asked to remove ${RED}$APP_NAME${NC} launcher\n"
    echo 'Proceed ? (y/N)'
    read -r choice
    if [ "$choice" != "y" ]; then
        echo 'Exiting'
        exit 0
    fi
    if [ -f "$HOME/.local/share/applications/$APP_NAME.desktop" ]; then

        rm -vf "$HOME/.local/share/applications/$APP_NAME.desktop"
        if [ -x "$(command -v update-desktop-database)" ]; then
            update-desktop-database "$HOME/.local/share/applications"
        fi
        echo -e "\n${RED}$APP_NAME${NC} launcher has been removed\n"
        exit 0
    else
        echo -e "\nLauncher for ${RED}$APP_NAME${NC} does not exists !\n"
        exit 1
    fi
}

function writeIcon() {

    ckBinaries
    if ! [[ -d "$HOME/.local/share/icons/hicolor/512x512/apps" ]]; then
        mkdir -pv "$HOME/.local/share/icons/hicolor/512x512/apps" ||
            die "Cannot create $HOME/.local/share/icons/hicolor/512x512/apps"
    fi
    cp "$IMAGE" "$HOME/.local/share/icons/hicolor/512x512/" &&
        cd "$HOME/.local/share/icons/hicolor/512x512"
    inkscape --export-type=png "$IMAGE" -o "$APP_NAME.png" -d 300 -w 512 -h 512
}

function writeLauncher() {
    echo -e "\twriteLauncher()"
    [[ -z $ICON ]] && ICON='org.gnome.Extensions-symbolic'
    ICON="$HOME/.local/share/icons/hicolor/512x512/$APP_NAME.png"

    echo -e "\n${RED}LAUNCHER${NC} = $LAUNCHER"
    echo -e "\n${RED}ICON${NC} = $ICON"

    cat >"$LAUNCHER" <<-EOM
    [Desktop Entry]
    Encoding=UTF-8
    Type=Application
    Name=$APP_NAME
    Icon=$ICON
    Exec=$PATH_OF_EXEC %F
    Comment=$COMMENT
    Categories=$CATEGORIES
    StartupNotify=false
    Terminal=false
    X-AppImage-Comment=Generated by make_gnome_launcher.sh
EOM
    chmod u+x "$LAUNCHER"
    echo -e "\n${RED}Success ! ${NC}"
    exit 0
}

main() {
    LAUNCHER="$HOME/.local/share/applications/$APP_NAME.desktop"
    echo -e "\n${RED}LAUNCHER${NC} = $LAUNCHER"
    echo -e "\nMain" >&2
    if validateArgv; then
        # BEGIN
        launcherExists
        echo -e "\nProceed ? (y/N)"
        read -r choice
        if [ "$choice" != "y" ]; then
            echo 'Exiting...' && exit 0
        fi
        writeIcon
        writeLauncher
    else
        die "You musn't see this !"
    fi
    ICON="$HOME/.local/share/icons/hicolor/512x512/apps/$APP_NAME.png"
}

usage() {
    cat <<EOF
 Usage : make_gnome_launcher [OPTION]...
 Create a gnome launcher for a custom application with a given path.
 -h, (help)   show this message
 -v, (verbose)  print informations about variables and stuff
 -i, (image)  set image for icon (svg, need for inkscape)
 -e, (executable) set the path of the executable
 -n, (name)   set the app name
 -c, (comment)  set the comment
 -g, (categories) set the categorie(s)
 -u, (uninstall) uninstall the given app
EOF
}

[ $# = 0 ] && usage " >>> No option is given "
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

# Reset in case getopts was previously used in the shell
OPTIND=1
while getopts "hvi:e:n:c:g:u" opt; do
    case "$opt" in
    \?)
        usage
        exit 1
        ;;
    h)
        usage
        exit 0
        ;;
    v)
        VERBOSE=1
        ;;
    u)
        uninstall
        ;;
    i)
        IMAGE="$OPTARG"
        ;;
    e)
        PATH_OF_EXEC="$OPTARG"
        ;;
    n)
        APP_NAME="$OPTARG"
        ;;
    c)
        COMMENT="$OPTARG"
        ;;
    g)
        CATEGORIES="$OPTARG"
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
done
[[ $VERBOSE == "1" ]] && print_opts

if [[ $# == "0" ]]; then
    ckBinaries || exit 1
    main || exit 1
    exit 0
else
    ckBinaries || exit 1
    main || exit 1
    exit 0
fi
